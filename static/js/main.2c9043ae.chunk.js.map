{"version":3,"sources":["components/InputField/InputField.js","components/AddForm/AddForm.js","components/Watch/Watch.js","components/WatchesList/WatchesList.js","components/Watches/Watches.js","App.js","serviceWorker.js","index.js"],"names":["InputField","props","name","value","label","onChange","className","htmlFor","id","evt","target","defaultProps","AddForm","fields","submitBtnText","onSubmit","handleChange","preventDefault","map","o","key","type","Watch","state","time","moment","utcOffset","zone","shouldComponentUpdate","second","handleClose","onClose","tick","setState","this","timer","setInterval","clearInterval","minutes","minute","seconds","hours","hour","minStyle","transform","minuteRotation","hourStyle","hourRotation","format","style","onClick","Component","WatchesList","onRemove","items","Watches","formFields","defaultFormFields","watches","handleAddFormChange","prevState","field","handleAdd","find","Number","handleRemove","filter","addFormProps","watchesListProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c9043ae.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction InputField(props) {\n  const { name, value, label, onChange } = props;\n\n  const handleChange = (evt) => onChange(name, evt.target.value);\n\n  return (\n    <div className='input-field'>\n      <label htmlFor={name}>{label}</label>\n      <input id={name} name={name} value={value} onChange={handleChange}/>\n    </div>\n  )\n}\n\nInputField.defaultProps = {\n  label: '',\n  value: '',\n}\n\nInputField.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default InputField\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport InputField from '../InputField/InputField';\nimport './AddForm.css';\n\nexport default function AddForm(props) {\n  const { fields, submitBtnText, onSubmit, onChange } = props;\n\n  const handleChange = (name, value) => onChange(name, value);\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    onSubmit();\n  }\n\n  return (\n    <form className='add-form' onSubmit={handleSubmit}>\n      { fields.map((o) => \n        <InputField {...o} onChange={handleChange} key={o.name}/>\n      )}\n      <button type='submit'>{submitBtnText}</button>\n    </form>\n  )\n}\n\nAddForm.defaultProps = {\n  fields: [],\n  submitBtnText: 'Добавить',\n}\n\nAddForm.propTypes = {\n  fields: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    value: PropTypes.string,\n  })),\n  submitBtnText: PropTypes.string,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport './Watch.css';\n\nexport class Watch extends Component {\n  static propTypes = {\n    zone: PropTypes.number,\n    onClose: PropTypes.func,\n  }\n\n  static defaultProps = {\n    zone: 0,\n  }\n\n  state = {\n    time: moment().utcOffset(this.props.zone),\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.tick, 50);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n  \n  shouldComponentUpdate = () => {\n    if (moment().second() === this.state.time.second()) return false;\n    return true;\n  }\n\n  handleClose = () => this.props.onClose(this.props.name);\n\n  tick = () => {\n    this.setState({ time: moment().utcOffset(this.props.zone) });\n  }\n\n  minuteRotation(time) {\n    const minutes = time.minute();\n    const seconds = time.second();\n    return `rotate(${(minutes + seconds / 60) / 60}turn) translate(0, -80%) scaleY(2)`;\n  }\n\n  hourRotation(time) {\n    const hours = time.hour();\n    const minutes = time.minute();\n    return `rotate(${(hours + minutes / 60) % 12 / 12}turn) translate(0, -48%) scaleY(1.2)`;\n  }\n\n  render() {\n    const minStyle = { transform: this.minuteRotation(this.state.time) };\n    const hourStyle = { transform: this.hourRotation(this.state.time) };\n    return (\n      <div className='watch'>\n        <div className='watch-name'>{this.props.name}</div>\n        <div className='watch-time'>{this.state.time.format('HH:mm:ss')}</div>\n        <div className='watch-minute'><span style={minStyle}>↑</span></div>\n        <div className='watch-hour'><span style={hourStyle}>↑</span></div>\n        { this.props.onClose &&\n          <div className='watch-close' onClick={this.handleClose}>{'X'}</div>\n        }\n       </div>\n    )\n  }\n}\n\nexport default Watch\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Watch from '../Watch/Watch';\nimport './WatchesList.css';\n\nfunction WatchesList(props) {\n  const handleClose = (name) => {\n    if (props.onRemove) props.onRemove(name);\n  }\n\n  return (\n    <div className='watches-list'>\n      {\n        props.items.map((o) =>\n          <Watch {...o} onClose={handleClose} key={o.name}/>\n        )\n      }\n    </div>\n  )\n}\n\nWatchesList.defaultProps = {\n  items: [],\n}\n\nWatchesList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    zone: PropTypes.number.isRequired,\n  })),\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default WatchesList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport AddForm from '../AddForm/AddForm';\nimport './Watches.css';\nimport WatchesList from '../WatchesList/WatchesList';\n\nexport class Watches extends Component {\n  static propTypes = {\n    items: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      zone: PropTypes.number.isRequired,\n    }))\n  };\n\n  static defaultFormFields = [\n    { name: 'name', label: 'Название', value: '' },\n    { name: 'zone', label: 'Временная зона', value: '' },\n  ];\n  \n  state = {\n    formFields: [...Watches.defaultFormFields],\n    watches: [],\n  }\n\n  componentDidMount() {\n    if (!this.props.items) return;\n    this.setState({\n      watches: this.props.items,\n    })\n  }\n\n  handleAddFormChange = (name, value) => {\n    this.setState((prevState) => ({\n      formFields: prevState.formFields.map((o) => {\n        const field = { ...o };\n        if (field.name === name) field.value = value;\n        return field;\n      }),\n    }))\n  };\n\n  handleAdd = () => {\n    const name = this.state.formFields.find((o) => o.name === 'name').value;\n    const zone = Number(this.state.formFields.find((o) => o.name === 'zone').value);\n    if (name === '') return;\n    if (this.state.watches.find((o) => o.name === name)) return;\n    this.setState((prevState) => \n      ({\n        formFields: [...Watches.defaultFormFields],\n        watches: [...prevState.watches, { name, zone }],\n      })\n    );\n  };\n\n  handleRemove = (name) => {\n    this.setState((prevState) => ({\n      watches: prevState.watches.filter((o) => o.name !== name),\n    }));\n  }\n\n  render() {\n    const addFormProps = {\n      fields: this.state.formFields,\n      onSubmit: this.handleAdd,\n      onChange: this.handleAddFormChange,\n    }\n    const watchesListProps = {\n      items: this.state.watches,\n      onRemove: this.handleRemove,\n    }\n    return (\n      <div className='watches'>\n        <AddForm {...addFormProps}/>\n        <WatchesList {...watchesListProps}/>\n      </div>\n    )\n  }\n}\n\nexport default Watches\n","import React from 'react';\nimport './App.css';\nimport Watches from './components/Watches/Watches';\n\nfunction App() {\n  return (\n    <Watches items={[{ name: 'UTC', zone: 0 }]}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}